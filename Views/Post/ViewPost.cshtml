
<style>
    .post-img {
        width: 100%;
        height: auto;
    }

    .post-pos-fixed {
        position: fixed;
    }

    .post-text-justify {
        text-align: justify;
        text-justify: inter-word;
    }

    .post-img-profile {
        aspect-ratio: 1/1;
        width: 100%;
    }

    .post-view-height {
        height: 94vh;
    }

    .pt-2 {
        padding-top: 2rem;
    }

    .bg-grey {
        background-color: whitesmoke;
    }
</style>
<div class="container-fluid">
    <div class="row">
        <div class="col-md-9 col-sm-12 post-view-height overflow-auto p-3">
            <p class="text-center fs-1 fw-bold font-monospace">@ViewBag.Post.Title</p>
            <p class="text-center fw-bold font-monospace">Written By @ViewBag.Writer.Name, Posted on @ViewBag.Post.CreationTime</p>
            @if (Session["Username"] != null)
            {
                <p class="text-center fw-bold font-monospace">
                    @if (ViewBag.currentReact.ReactStatus == 1)
                    {
                        <i class="bi bi-hand-thumbs-up-fill mx-2" onclick="btnVoteClicked(0)">Upvote</i>
                    }
                    else
                    {
                        <i class="bi bi-hand-thumbs-up mx-2" onclick="btnVoteClicked(1)">Upvote</i>
                    }
                    @if (ViewBag.currentReact.ReactStatus == -1)
                    {
                        <i class="bi bi-hand-thumbs-down-fill mx-2" onclick="btnVoteClicked(-1)">Downvote</i>
                    }
                    else
                    {
                        <i class="bi bi-hand-thumbs-down mx-2" onclick="btnVoteClicked(-1)">Downvote</i>
                    }
                    <!--Report Button to trigger modal starts here-->
                    @if (Session["Username"].ToString().CompareTo(ViewBag.Writer.Username) != 0)
                    {
                        <i class="bi bi-flag mx-2" data-bs-toggle="modal" data-bs-target="#reportModal">Report</i>
                    }

                </p>
            }
            @if (ViewBag.Media.Length > 0)
            {
                <div id="indexCarousel" class="carousel slide" data-bs-ride="carousel">
                    <div class="carousel-indicators">
                        @for (int i = 0; i < ViewBag.Media.Length; ++i)
                        {
                            <button type="button" id=@String.Format("slideBtn{0}", i) data-bs-target="#indexCarousel" data-bs-slide-to=@String.Format("{0}", i) aria-label=@String.Format("Slide {0}", i + 1)></button>
                        }
                    </div>
                    <div class="carousel-inner">
                        @for (int i = 0; i < ViewBag.Media.Length; ++i)
                        {
                            <div id=@String.Format("slideInner{0}", i) class="carousel-item index-carousal-fitter">
                                <img src=@Url.Content("~/Images/MediaContent/" + ViewBag.Media[i].MediaID + ViewBag.Media[i].Type) class="post-img rounded index-carousal-img" alt="...">
                            </div>
                        }
                    </div>
                    <button class="carousel-control-prev" type="button" data-bs-target="#indexCarousel" data-bs-slide="prev">
                        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                        <span class="visually-hidden">Previous</span>
                    </button>
                    <button class="carousel-control-next" type="button" data-bs-target="#indexCarousel" data-bs-slide="next">
                        <span class="carousel-control-next-icon" aria-hidden="true"></span>
                        <span class="visually-hidden">Next</span>
                    </button>
                </div>
            }

            <p class="text-start font-monospace my-3">
                @ViewBag.Post.Content
            </p>
            <!--Report Modal Begins here-->
            <div class="modal fade" id="reportModal" tabindex="-1" aria-labelledby="reportModalArea" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="reportModal">Modal title</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <div class="form-group">
                                <label for="reportDescription">Why are you reporting this post?</label>
                                <textarea class="form-control" id="reportDescription" rows="4"></textarea>
                            </div>

                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button type="button" class="btn btn-primary" data-bs-dismiss="modal" onclick="btnReportClicked()">Report</button>
                        </div>
                    </div>
                </div>
            </div>
            <!--Report Modal Ends here here-->
        </div>
        <div class="col-md-3 col-sm-12 overflow-auto position-sticky">
            <div class="container-fluid">
                <div class="row my-3">
                    <div class="col-11 p-0">
                        @if (Session["Username"] != null)
                        {
                            <form action="~/Post/ViewPost" method="post" class="p-0" id="cmntForm">
                                <textarea id="comment" class="form-control my-1" rows="3" placeholder="Comment something..." name="Content"></textarea>
                                <input type="button" class="btn-primary form-control" value="Comment" onclick="btnSubmitComment()" />
                            </form>
                        }
                        else
                        {
                            <div class="p-0 container-fluid">
                                <p class="text-center">Login to comment!</p>
                            </div>
                        }
                    </div>
                </div>
                @for (int i = 0; i < ViewBag.Replies.Length; ++i)
                {
                    <div class="row my-3">
                        <div class="col-2 p-0 m-0">
                            <img class="rounded-circle post-img-profile" src=@Url.Content("~/Images/ProfilePicture/" + ViewBag.Users[i].DisplayPictureName) />
                        </div>
                        <div class="col-9 mx-1 rounded bg-grey">
                            <span class="fw-bold">@ViewBag.Users[i].Name</span>
                            <div class="fw-normal">@ViewBag.Replies[i].Content</div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">
    var slideButton0 = document.getElementById("slideBtn0");
    if (slideButton0 != null) {
        slideButton0.setAttribute("class", "active");
        slideButton0.setAttribute("aria-current", "true");
    }

    var slideInner0 = document.getElementById("slideInner0");
    if (slideInner0 != null) {
        slideInner0.setAttribute("class", "carousel-item index-carousal-fitter active post-img rounded");
    }

    function btnSubmitComment() {
        var cmnt = document.getElementById('comment');
        if (cmnt.value.trim().length <= 0) {
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: 'Write Something!'
            });
            return;
        }
        $('#cmntForm').submit();
    }

    function btnVoteClicked(reactStatus) {
        const params = new URLSearchParams(window.location.search);
        var postID = params.get('PostID');
        $.ajax({
            type: 'POST',
            url: '@Url.Action("UpdateReact", "Post")',
            data: {
                PostID: postID,
                ReactStatus: reactStatus
            },
            success: function (response) {
                location.reload();
            },
            error: function (response) {
                console.log(response);
            }
        })
    }

    function btnReportClicked() {
        const params = new URLSearchParams(window.location.search);
        var postID = params.get('PostID');
        var reportReason = $('#reportDescription').val();
        if (reportReason.trim().length <= 0) {
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: 'Write Something!'
            });
            return;
        }
        console.log(reportReason);
        $.ajax({
            type: 'POST',
            url: '@Url.Action("Report", "Post")',
            data: {
                Reason: reportReason,
                Context: 'POST',
                ContextID: postID
            },
            success: function (response) {
                console.log(response);
                let jsonData = JSON.parse(response);
                console.log(jsonData);
                if (jsonData.Status == "Exists") {
                    Swal.fire({
                        icon: 'error',
                        title: 'Report Pending',
                        text: 'Seems like you have a pending report on this post!'
                    });
                }
                if (jsonData.Status == "Reported") {
                    Swal.fire({
                        icon: 'success',
                        title: 'Reported',
                        text: 'Your report was succesfully submitted!'
                    });
                }
            }
        })
    }
</script>